{"/home/travis/build/npmtest/node-npmtest-node-mind/test.js":"/* istanbul instrument in package npmtest_node_mind */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mind/lib.npmtest_node_mind.js":"/* istanbul instrument in package npmtest_node_mind */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_mind = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_mind = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mind/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-mind && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_mind */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_mind\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_mind.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_mind.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_mind.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_mind.__dirname + '/lib.npmtest_node_mind.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-mind/node_modules/node-mind/lib/index.js":"\n/**\n * Dependencies.\n */\n\nvar sigmoidPrime = require('sigmoid-prime');\nvar Emitter = require('emitter-component');\nvar htanPrime = require('htan-prime');\nvar Matrix = require('node-matrix');\nvar sigmoid = require('sigmoid');\nvar sample = require('samples');\nvar htan = require('htan');\n\n/**\n * References.\n */\n\nvar scalar = Matrix.multiplyScalar;\nvar dot = Matrix.multiplyElements;\nvar multiply = Matrix.multiply;\nvar subtract = Matrix.subtract;\nvar add = Matrix.add;\n\n/**\n * Export `Mind`.\n */\n\nmodule.exports = Mind;\n\n/**\n * Initialize a new `Mind`.\n *\n * @param {Object} opts\n * @return {Object} this\n * @api public\n */\n\nfunction Mind(opts) {\n  if (!(this instanceof Mind)) return new Mind(opts);\n  opts = opts || {};\n\n  opts.activator === 'sigmoid'\n    ? (this.activate = sigmoid, this.activatePrime = sigmoidPrime)\n    : (this.activate = htan, this.activatePrime = htanPrime);\n\n  // hyperparameters\n  this.learningRate = opts.learningRate || 0.7;\n  this.iterations = opts.iterations || 10000;\n  this.hiddenLayers = opts.hiddenLayers || 1;\n  this.hiddenUnits = opts.hiddenUnits || 3;\n}\n\n/**\n * Mixin.\n */\n\nEmitter(Mind.prototype);\n\n/**\n * Learn.\n *\n * \t1. Normalize examples\n * \t2. Setup weights\n * \t3. Forward propagate to generate a prediction\n *  4. Back propagate to adjust weights\n *  5. Repeat (3) and (4) `this.iterations` times\n *\n *  These five steps enable our network to learn the relationship\n *  between inputs and outputs.\n *\n * @param {Array} examples\n * @return {Object} this\n * @api public\n */\n\nMind.prototype.learn = function(examples) {\n  examples = normalize(examples);\n\n  this.setup(examples);\n\n  for (var i = 0; i < this.iterations; i++) {\n    var results = this.forward(examples);\n    var errors = this.back(examples, results);\n\n    this.emit('data', i, errors, results);\n  }\n\n  return this;\n};\n\n/**\n * Setup the weights.\n *\n * @param {Object} examples\n * @api private\n */\n\nMind.prototype.setup = function(examples) {\n  this.weights = [];\n\n  // input > hidden\n  this.weights.push(\n    Matrix({\n      rows: examples.input[0].length,\n      columns: this.hiddenUnits,\n      values: sample\n    })\n  );\n\n  // hidden > hidden\n  for (var i = 1; i < this.hiddenLayers; i++) {\n    this.weights.push(\n      Matrix({\n        rows: this.hiddenUnits,\n        columns: this.hiddenUnits,\n        values: sample\n      })\n    );\n  }\n\n  // hidden > output\n  this.weights.push(\n    Matrix({\n      rows: this.hiddenUnits,\n      columns: examples.output[0].length,\n      values: sample\n    })\n  );\n};\n\n/**\n * Forward propagate.\n *\n * @param {Object} examples\n * @return {Array} results\n * @api private\n */\n\nMind.prototype.forward = function(examples) {\n  var activate = this.activate;\n  var weights = this.weights;\n  var results = [];\n\n  // sum the weight and input\n  function sum(w, i) {\n    var res = {};\n\n    res.sum = multiply(w, i);\n    res.result = res.sum.transform(activate);\n\n    return res;\n  };\n\n  // input > hidden\n  results.push(\n    sum(weights[0], examples.input)\n  );\n\n  // hidden > hidden\n  for (var i = 1; i < this.hiddenLayers; i++) {\n    results.push(\n      sum(weights[i], results[i - 1].result)\n    );\n  }\n\n  // hidden > output\n  results.push(\n    sum(weights[weights.length - 1], results[results.length - 1].result)\n  );\n\n  return results;\n};\n\n/**\n * Back propagate.\n *\n * @param {Object} outputMatrix\n * @api private\n */\n\nMind.prototype.back = function(examples, results) {\n  var activatePrime = this.activatePrime;\n  var hiddenLayers = this.hiddenLayers;\n  var learningRate = this.learningRate;\n  var weights = this.weights;\n\n  // output > hidden\n  var error = subtract(examples.output, results[results.length - 1].result);\n  var delta = dot(results[results.length - 1].sum.transform(activatePrime), error);\n  var changes = scalar(multiply(delta, results[0].result.transpose()), learningRate);\n  weights[weights.length - 1] = add(weights[weights.length - 1], changes);\n\n  // hidden > hidden\n  for (var i = 1; i < hiddenLayers; i++) {\n    delta = dot(multiply(weights[weights.length - i].transpose(), delta), results[results.length - (i + 1)].sum.transform(activatePrime));\n    changes = scalar(multiply(delta, results[results.length - (i + 1)].result.transpose()), learningRate);\n    weights[weights.length - (i + 1)] = add(weights[weights.length - (i + 1)], changes);\n  }\n\n  // hidden > input\n  delta = dot(multiply(weights[1].transpose(), delta), results[0].sum.transform(activatePrime));\n  changes = scalar(multiply(delta, examples.input.transpose()), learningRate);\n  weights[0] = add(weights[0], changes);\n\n  return error;\n};\n\n/**\n * Predict.\n *\n * @param {Array} input\n * @api public\n */\n\nMind.prototype.predict = function(input) {\n  var results = this.forward({ input: Matrix([input]) });\n\n  return results[results.length - 1].result[0];\n};\n\n/**\n * Upload weights.\n *\n * @param {Object} weights\n * @return {Object} this\n * @api public\n */\n\nMind.prototype.upload = function(weights) {\n  this.weights = weights;\n\n  return this;\n};\n\n/**\n * Download weights.\n *\n * @return {Object} weights\n * @api public\n */\n\nMind.prototype.download = function() {\n  return this.weights;\n};\n\n/**\n * Normalize the data.\n *\n * @param {Array} data\n * @return {Object} ret\n */\n\nfunction normalize(data) {\n  var ret = { input: [], output: [] };\n\n  for (var i = 0; i < data.length; i++) {\n    var datum = data[i];\n\n    ret.output.push(datum.output);\n    ret.input.push(datum.input);\n  }\n\n  ret.output = Matrix(ret.output);\n  ret.input = Matrix(ret.input);\n\n  return ret;\n}\n","/home/travis/build/npmtest/node-npmtest-node-mind/node_modules/node-mind/index.js":"!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.Mind=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\n/**\n * Dependencies.\n */\n\nvar sigmoidPrime = require('sigmoid-prime');\nvar Emitter = require('emitter-component');\nvar htanPrime = require('htan-prime');\nvar Matrix = require('node-matrix');\nvar sigmoid = require('sigmoid');\nvar sample = require('samples');\nvar htan = require('htan');\n\n/**\n * References.\n */\n\nvar scalar = Matrix.multiplyScalar;\nvar dot = Matrix.multiplyElements;\nvar multiply = Matrix.multiply;\nvar subtract = Matrix.subtract;\nvar add = Matrix.add;\n\n/**\n * Export `Mind`.\n */\n\nmodule.exports = Mind;\n\n/**\n * Initialize a new `Mind`.\n *\n * @param {Object} opts\n * @return {Object} this\n * @api public\n */\n\nfunction Mind(opts) {\n  if (!(this instanceof Mind)) return new Mind(opts);\n  opts = opts || {};\n\n  opts.activator === 'sigmoid'\n    ? (this.activate = sigmoid, this.activatePrime = sigmoidPrime)\n    : (this.activate = htan, this.activatePrime = htanPrime);\n\n  // hyperparameters\n  this.learningRate = opts.learningRate || 0.7;\n  this.iterations = opts.iterations || 10000;\n  this.hiddenLayers = opts.hiddenLayers || 1;\n  this.hiddenUnits = opts.hiddenUnits || 3;\n}\n\n/**\n * Mixin.\n */\n\nEmitter(Mind.prototype);\n\n/**\n * Learn.\n *\n * \t1. Normalize examples\n * \t2. Setup weights\n * \t3. Forward propagate to generate a prediction\n *  4. Back propagate to adjust weights\n *  5. Repeat (3) and (4) `this.iterations` times\n *\n *  These five steps enable our network to learn the relationship\n *  between inputs and outputs.\n *\n * @param {Array} examples\n * @return {Object} this\n * @api public\n */\n\nMind.prototype.learn = function(examples) {\n  examples = normalize(examples);\n\n  this.setup(examples);\n\n  for (var i = 0; i < this.iterations; i++) {\n    var results = this.forward(examples);\n    var errors = this.back(examples, results);\n\n    this.emit('data', i, errors, results);\n  }\n\n  return this;\n};\n\n/**\n * Setup the weights.\n *\n * @param {Object} examples\n * @api private\n */\n\nMind.prototype.setup = function(examples) {\n  this.weights = [];\n\n  // input > hidden\n  this.weights.push(\n    Matrix({\n      rows: examples.input[0].length,\n      columns: this.hiddenUnits,\n      values: sample\n    })\n  );\n\n  // hidden > hidden\n  for (var i = 1; i < this.hiddenLayers; i++) {\n    this.weights.push(\n      Matrix({\n        rows: this.hiddenUnits,\n        columns: this.hiddenUnits,\n        values: sample\n      })\n    );\n  }\n\n  // hidden > output\n  this.weights.push(\n    Matrix({\n      rows: this.hiddenUnits,\n      columns: examples.output[0].length,\n      values: sample\n    })\n  );\n};\n\n/**\n * Forward propagate.\n *\n * @param {Object} examples\n * @return {Array} results\n * @api private\n */\n\nMind.prototype.forward = function(examples) {\n  var activate = this.activate;\n  var weights = this.weights;\n  var results = [];\n\n  // sum the weight and input\n  function sum(w, i) {\n    var res = {};\n\n    res.sum = multiply(w, i);\n    res.result = res.sum.transform(activate);\n\n    return res;\n  };\n\n  // input > hidden\n  results.push(\n    sum(weights[0], examples.input)\n  );\n\n  // hidden > hidden\n  for (var i = 1; i < this.hiddenLayers; i++) {\n    results.push(\n      sum(weights[i], results[i - 1].result)\n    );\n  }\n\n  // hidden > output\n  results.push(\n    sum(weights[weights.length - 1], results[results.length - 1].result)\n  );\n\n  return results;\n};\n\n/**\n * Back propagate.\n *\n * @param {Object} outputMatrix\n * @api private\n */\n\nMind.prototype.back = function(examples, results) {\n  var activatePrime = this.activatePrime;\n  var hiddenLayers = this.hiddenLayers;\n  var learningRate = this.learningRate;\n  var weights = this.weights;\n\n  // output > hidden\n  var error = subtract(examples.output, results[results.length - 1].result);\n  var delta = dot(results[results.length - 1].sum.transform(activatePrime), error);\n  var changes = scalar(multiply(delta, results[0].result.transpose()), learningRate);\n  weights[weights.length - 1] = add(weights[weights.length - 1], changes);\n\n  // hidden > hidden\n  for (var i = 1; i < hiddenLayers; i++) {\n    delta = dot(multiply(weights[weights.length - i].transpose(), delta), results[results.length - (i + 1)].sum.transform(activatePrime));\n    changes = scalar(multiply(delta, results[results.length - (i + 1)].result.transpose()), learningRate);\n    weights[weights.length - (i + 1)] = add(weights[weights.length - (i + 1)], changes);\n  }\n\n  // hidden > input\n  delta = dot(multiply(weights[1].transpose(), delta), results[0].sum.transform(activatePrime));\n  changes = scalar(multiply(delta, examples.input.transpose()), learningRate);\n  weights[0] = add(weights[0], changes);\n\n  return error;\n};\n\n/**\n * Predict.\n *\n * @param {Array} input\n * @api public\n */\n\nMind.prototype.predict = function(input) {\n  var results = this.forward({ input: Matrix([input]) });\n\n  return results[results.length - 1].result[0];\n};\n\n/**\n * Upload weights.\n *\n * @param {Object} weights\n * @return {Object} this\n * @api public\n */\n\nMind.prototype.upload = function(weights) {\n  this.weights = weights;\n\n  return this;\n};\n\n/**\n * Download weights.\n *\n * @return {Object} weights\n * @api public\n */\n\nMind.prototype.download = function() {\n  return this.weights;\n};\n\n/**\n * Normalize the data.\n *\n * @param {Array} data\n * @return {Object} ret\n */\n\nfunction normalize(data) {\n  var ret = { input: [], output: [] };\n\n  for (var i = 0; i < data.length; i++) {\n    var datum = data[i];\n\n    ret.output.push(datum.output);\n    ret.input.push(datum.input);\n  }\n\n  ret.output = Matrix(ret.output);\n  ret.input = Matrix(ret.input);\n\n  return ret;\n}\n\n},{\"emitter-component\":2,\"htan\":4,\"htan-prime\":3,\"node-matrix\":5,\"samples\":6,\"sigmoid\":8,\"sigmoid-prime\":7}],2:[function(require,module,exports){\n\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n},{}],3:[function(require,module,exports){\n\n/**\n * Expose `htanPrime`.\n */\n\nmodule.exports = htanPrime;\n\n/**\n * Derivative of the hyperbolic tangent function.\n *\n * @param {Number} z\n */\n\nfunction htanPrime(z) {\n  return 1 - Math.pow((Math.exp(2 * z) - 1) / (Math.exp(2 * z) + 1), 2);\n}\n\n},{}],4:[function(require,module,exports){\n\n/**\n * Expose `htan`.\n */\n\nmodule.exports = htan;\n\n/**\n * Hyperbolic tangent function.\n *\n * - Useful for inputs between -1 and 1\n */\n\nfunction htan(z) {\n  return (Math.exp(2 * z) - 1) / (Math.exp(2 * z) + 1);\n}\n},{}],5:[function(require,module,exports){\n\n/**\n * Expose `Matrix`.\n */\n\nmodule.exports = Matrix;\n\n/**\n * Matrix.\n *\n * @param {Object|Array} opts\n * @return {Object} this\n */\n\nfunction Matrix(opts) {\n  if (!(this instanceof Matrix)) return new Matrix(opts);\n\n  if (Array.isArray(opts)) { // Passing in values\n    this.numRows = opts.length;\n    this.numCols = opts[0].length;\n\n    for (var i = 0; i < this.numRows; i++) {\n      this[i] = [];\n\n      for (var j = 0; j < this.numCols; j++) {\n        this[i][j] = opts[i][j];\n      }\n    }\n  } else if (typeof opts === 'object') {  // Passing in dimensions\n    this.numRows = opts.rows;\n    this.numCols = opts.columns;\n\n    for (var i = 0; i < this.numRows; i++) {\n      this[i] = [];\n\n      for (var j = 0; j < this.numCols; j++) {\n        if (typeof opts.values === 'function') {\n          this[i][j] = opts.values();\n        } else if (typeof opts.values === 'number') {\n          this[i][j] = opts.values;\n        } else {\n          this[i][j] = 0;\n        }\n      }\n    }\n  } else {\n    throw new Error('You must supply an object or an array');\n  }\n\n  this.dimensions = [this.numRows, this.numCols];\n}\n\n/**\n * Add.\n *\n * @param {Matrix} m1\n * @param {Matrix} m2\n * @return {Matrix} result\n */\n\nMatrix.add = function(m1, m2) {\n  // Number of rows and columns in first must equal number of rows and columns in second\n  if (m1.numRows !== m2.numRows || m1.numCols !== m2.numCols) {\n    throw new Error('You can only add matrices with equal dimensions');\n  }\n\n  var result = new Matrix({ rows: m1.numRows, columns: m1.numCols });\n\n  for (var i = 0; i < m1.numRows; i++) {\n\t\tfor (var j = 0; j < m1.numCols; j++) {\n\t\t\tresult[i][j] = m1[i][j] + m2[i][j];\n\t\t}\n\t}\n\n  return result;\n};\n\n/**\n * Subtract.\n *\n * @param {Matrix} m1\n * @param {Matrix} m2\n * @return {Matrix} result\n */\n\nMatrix.subtract = function(m1, m2) {\n  // Number of rows and number of columns in first must equal number of rows and number of columns in second\n  if (m1.numRows !== m2.numRows || m1.numCols !== m2.numCols) {\n    throw new Error('You can only subtract matrices with equal dimensions');\n  }\n\n  var result = new Matrix({ rows: m1.numRows, columns: m1.numCols });\n\n  for (var i = 0; i < m1.numRows; i++) {\n\t\tfor (var j = 0; j < m1.numCols; j++) {\n\t\t\tresult[i][j] = m1[i][j] - m2[i][j];\n\t\t}\n\t}\n\n  return result;\n};\n\n/**\n * Matrix multiplication.\n *\n * @param {Matrix} m1\n * @param {Matrix} m2\n * @return {Matrix} result\n */\n\nMatrix.multiply = function(m1, m2) {\n  var result = Matrix({ rows: m2.numRows, columns: m1.numCols });\n\n  for (var i = 0; i < m2.numRows; i++) {\n    result[i] = [];\n\n    for (var j = 0; j < m1.numCols; j++) {\n      var sum = 0;\n\n      for (var k = 0; k < m1.numRows; k++) {\n        sum += m1[k][j] * m2[i][k];\n      }\n\n      result[i][j] = sum;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Scalar multiplication.\n *\n * @param {Matrix} m1\n * @param {Number} num\n * @return {Matrix} result\n */\n\nMatrix.multiplyScalar = function(m1, num) {\n  var result = Matrix({ rows: m1.numRows, columns: m1.numCols });\n\n  for (var i = 0; i < m1.numRows; i++) {\n    for (var j = 0; j < m1.numCols; j++) {\n      result[i][j] = m1[i][j] * num;\n    }\n  }\n\n  return result;\n};\n\n/**\n * Element-wise multiplcation.\n *\n * @param {Matrix} m1\n * @param {Matrix} m2\n * @return {Matrix} result\n */\n\nMatrix.multiplyElements = function(m1, m2) {\n  var result = Matrix({ rows: m1.numRows, columns: m1.numCols })\n\n  for (var i = 0; i < m1.numRows; i++) {\n   result[i] = [];\n\n   for (var j = 0; j < m1[i].length; j++) {\n     result[i][j] = m1[i][j] * m2[i][j];\n   }\n  }\n\n  return result;\n};\n\n/**\n * Compute the tranpose.\n *\n * @return {Matrix} result\n */\n\nMatrix.prototype.transpose = function() {\n  var result = Matrix({ rows: this.numCols, columns: this.numRows });\n\n  for (var i = 0; i < this.numCols; i++) {\n    result[i] = [];\n\n    for (var j = 0; j < this.numRows; j++) {\n      result[i][j] = this[j][i];\n    }\n  }\n\n  return result;\n};\n\n/**\n * Call a function on each element in the matrix.\n *\n * @param {Function} fn\n * @return {Matrix} result\n */\n\nMatrix.prototype.transform = function(fn) {\n  var result = Matrix({ rows: this.numRows, columns: this.numCols });\n\n  for (var i = 0; i < result.numRows; i++) {\n\t\tfor (var j = 0; j < result.numCols; j++) {\n\t\t\tresult[i][j] = fn(this[i][j]);\n\t\t}\n\t}\n\n  return result;\n};\n\n},{}],6:[function(require,module,exports){\n\n/**\n * Expose `sample`.\n */\n\nmodule.exports = sample;\n\n/**\n * Generate a random sample from the Guassian distribution.\n *\n * \t- Uses the Box–Muller transform: https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform\n */\n\nfunction sample() {\n  return Math.sqrt(-2 * Math.log(Math.random())) * Math.cos(2 * Math.PI * Math.random());\n}\n\n},{}],7:[function(require,module,exports){\n\n/**\n * Expose `sigmoidPrime`.\n */\n\nmodule.exports = sigmoidPrime;\n\n/**\n * Derivative of the sigmoid function.\n *\n * - Used to calculate the deltas in neural networks.\n *\n * @param {Number} z\n */\n\nfunction sigmoidPrime(z) {\n  return Math.exp(-z) / Math.pow(1 + Math.exp(-z), 2);\n}\n\n},{}],8:[function(require,module,exports){\n\n/**\n * Expose `sigmoid`.\n */\n\nmodule.exports = sigmoid;\n\n/**\n * sigmoid.\n *\n * \t- Non-linear, continuous, and differentiable logistic function.\n *\n * @param {Number} z\n */\n\nfunction sigmoid(z) {\n  return 1 / (1 + Math.exp(-z));\n}\n\n},{}]},{},[1])(1)\n});"}